#!/usr/bin/env python3.5
# -*- coding: utf-8 -*-
import os
import sys
import traceback
import inspect
import logging
import json
import time

from PyQt5.QtGui import QGuiApplication
from PyQt5.QtQml import QQmlApplicationEngine
from PyQt5.QtCore import QObject, QRunnable, QThreadPool, QSettings
from PyQt5.QtCore import pyqtSignal, pyqtSlot, pyqtProperty
from PyQt5.QtCore import QAbstractListModel, QSortFilterProxyModel, QModelIndex, Qt

from ftplib import FTP
from shutil import which, unpack_archive
from requests import get
from subprocess import run


__VERSION__ = '0.1'

COMPANY = 'ARKZilla'
USERAGENT = {'User-Agent': COMPANY + __VERSION__}


def log(message):
    """
    Log message with function name and string number
    """
    func = inspect.currentframe().f_back.f_code
    # Dump the message + the name of this function to the log.
    logging.debug('%s: %s() in %s:%i' % (
                  message,
                  func.co_name,
                  func.co_filename,
                  func.co_firstlineno))


class Progress(object):
    """
    Helper class for progress calculation
    Simplified version of Progressbar: https://github.com/anler/progressbar
    """
    def __init__(self, start=0, end=10, incremental=True):
        super(Progress, self).__init__()
        self.__start = start
        self.__end = end
        self.__progress = float(self.__start) if incremental else float(self.__end)
        self.__previous = self.__progress

    def __add__(self, increment):
        if self.__end > self.__progress + increment:
            self.__progress += increment
        else:
            self.__progress = float(self.__end)
        return self

    def __sub__(self, decrement):
        if self.__start < self.__progress - decrement:
            self.__progress -= decrement
        else:
            self.__progress = float(self.__start)
        return self

    def percent(self):
        result = int(self.__progress / self.__end * 100)
        # Return False if percent not changed (do not emit bunch of signals)
        if result != self.__previous:
            self.__previous = result
            return result
        else:
            return False


class Worker(QRunnable):
    """
    Worker thread

    Inherits from QRunnable to handler worker thread setup, signals and wrap-up.

    :param callback: The function callback to run on this worker thread. Supplied args and
                     kwargs will be passed through to the runner.
    :type callback: function
    :param args: Arguments to pass to the callback function
    :param kwargs: Keywords to pass to the callback function

    """

    def __init__(self, fn, *args, **kwargs):
        super(Worker, self).__init__()

        # Store constructor arguments (re-used for processing)
        self.fn = fn
        self.args = args
        self.kwargs = kwargs
        self.signals = WorkerSignals()

        # Add the callback to our kwargs
        kwargs['progress_callback'] = self.signals.progress

    @pyqtSlot()
    def run(self):
        """
        Initialise the runner function with passed args, kwargs.
        """

        # Retrieve args/kwargs here; and fire processing using them
        try:
            result = self.fn(*self.args, **self.kwargs)
        except Exception:
            traceback.print_exc()
            err_type, err = sys.exc_info()[:2]
            log('%s: %s' % (err_type, err))
            self.signals.error.emit(str(err))
        else:
            self.signals.result.emit(result)  # Return the result of the processing
        finally:
            self.signals.finished.emit()  # Done


class WorkerSignals(QObject):
    """
    Defines the signals available from a running worker thread.

    Supported signals are:

    finished
        No data

    error
        `tuple` (exctype, value, traceback.format_exc() )

    result
        `object` data returned from processing, anything

    progress
        `int` indicating % progress

    """
    finished = pyqtSignal()
    error = pyqtSignal(str)
    result = pyqtSignal(object)
    progress = pyqtSignal(int)


class Client(QObject):
    """
    Communication and data source management
    """

    def __init__(self):
        super(Client, self).__init__()
        # Init local data path
        self.__cwd = os.getcwd()
        self.__downloadPath = os.path.join(self.__cwd, 'download')
        self.__dataPath = os.path.join(self.__cwd, 'data')
        os.makedirs(self.__downloadPath, exist_ok=True)
        os.makedirs(self.__dataPath, exist_ok=True)

    def updatePath(self, path):
        """
        Update local data path by provided value

        :param path: Any string, e.g. remote host name
        """
        self.__downloadPath = os.path.join(self.__cwd, 'download', path)
        self.__dataPath = os.path.join(self.__cwd, 'data', path)
        os.makedirs(self.__downloadPath, exist_ok=True)
        os.makedirs(self.__dataPath, exist_ok=True)

    def testConnection(self, progress_callback, host, login, password):
        """
        Test Connection

        :param progress_callback: Callback function for progress
        :param host: Remote host name
        :param login: Remote user name
        :param password: Remote password
        """
        ftp = FTP()
        ftp.connect(host, timeout=5)
        ftp.login(user=login, passwd=password)
        ftp.close()

    def listRemote(self, progress_callback, host, login, password, path):
        """
        Get list of backups from path server

        :param progress_callback: Callback function for progress
        :param host: Remote host name
        :param login: Remote user name
        :param password: Remote password
        :param path: Remote directory path
        """
        ftp = FTP()
        ftp.connect(host, timeout=5)
        ftp.login(user=login, passwd=password)
        urls = ftp.nlst(os.path.join(path, '*.ark'))
        ftp.close()

        # Return only backup name without path
        backups = []
        for url in urls:
            backup = url.split('/')[-1]
            # Only add entries with timestamps
            if '_' in backup:
                backups.append(backup)

        return backups

    def listLocal(self, progress_callback, remote=[]):
        """
        Get list of downloaded backups and merge with remote

        :param progress_callback: Callback function for progress
        :param remote: Dict with remote backups
        """
        local = []
        for backup in os.listdir(self.__downloadPath):
            if os.path.isfile(os.path.join(self.__downloadPath, backup)):
                local.append(backup)

        model = []
        # Join and prepare two lists
        for backup in list(set(local + remote)):
            # Backup is already downloaded?
            islocal = self.isLocal(backup)
            name = backup.split('_')[:1].pop()
            # Format date and time
            dateRaw = backup[:-4].split('_', 1)[1:].pop()
            date = time.strftime('%Y.%m.%d %H:%M',
                                 time.strptime(dateRaw, '%d.%m.%Y_%H.%M.%S'))
            # Append to final model
            model.append({'local': islocal,
                          'name': name,
                          'date': date,
                          'backup': backup})

        backupModel.load(model)

    def isLocal(self, backup):
        """
        Return True if backup is downloaded

        :param backup: Filename of backup
        """
        return os.path.isfile(os.path.join(self.__downloadPath, backup))

    def download(self, progress_callback, host, login, password, path, backup):
        """
        Download backup with progress callback

        :param progress_callback: Callback function for progress
        :param host: Remote host name
        :param login: Remote user name
        :param password: Remote password
        :param path: Remote directory path
        :param backup: Filename of backup
        """
        ftp = FTP()
        ftp.connect(host, timeout=5)
        ftp.login(user=login, passwd=password)
        ftp.sendcmd('TYPE i')
        url = os.path.join(path, backup)
        filesize = ftp.size(url)
        progress = Progress(end=filesize)
        with open(os.path.join(self.__downloadPath, backup), 'wb') as f:

            def callback(chunk):
                f.write(chunk)
                progress + len(chunk)
                percent = progress.percent()
                if percent:
                    progress_callback.emit(percent)

            ftp.retrbinary('RETR {}'.format(url), callback)
        ftp.close()

    def remove(self, progress_callback, backup):
        """
        Remove downloaded backup and unpacked data with progress callback

        :param progress_callback: Callback function for progress
        :param backup: Filename of backup
        """
        backupData = os.path.join(self.__dataPath, backup)
        backup = os.path.join(self.__downloadPath, backup)

        # Build list of items to be removed
        paths = list()
        if os.path.exists(backupData) and os.path.isdir(backupData):
            for root, dirs, files in os.walk(backupData, topdown=False):
                for item in files:
                    paths.append(os.path.join(root, item))
                for item in dirs:
                    paths.append(os.path.join(root, item))
        paths.append(backup)

        # Remove files and emit progress callback
        progress = Progress(end=len(paths))
        for item in paths:
            if os.path.isdir(item):
                os.rmdir(item)
            else:
                os.remove(item)
            progress + 1
            percent = progress.percent()
            if percent:
                progress_callback.emit(percent)

    def unpack(self, progress_callback, backup, tools):
        """
        Unpack specified backup using ark-tools

        :param progress_callback: Callback function for progress
        :param backup: Filename of backup
        :param tools: Path to ark-tools
        """
        backupData = os.path.join(self.__dataPath, backup)
        backup = os.path.join(self.__downloadPath, backup)
        # Check if backup already unpacked
        if os.path.exists(os.path.join(backupData, '.complete')):
            return

        # Download ark-tools if not exists
        default = os.path.join(self.__cwd, 'tools', 'ark-tools.jar')
        if not os.path.exists(tools):
            if os.path.exists(default):
                tools = default
            else:
                tools = self.setupTools()

        # Check and download ark_data.json
        if not os.path.exists(os.path.join(self.__cwd, 'tools', 'ark_data.json')):
            args = ['java', '-jar', tools, '--quiet', 'update-data']
            run(args, check=True)

        # Unpack backup
        os.makedirs(backupData, exist_ok=True)
        args = ['java', '-jar', tools, '--quiet', 'tamed', '--clean', '--write-all-fields', backup, backupData]
        r = run(args, check=True)
        # Mark data as completed
        if r.returncode == 0:
            open(os.path.join(backupData, '.complete'), 'a').close()

    def setupTools(self):
        """
        Download and unpack ark-tools
        """
        log('ark-tools.jar not found. begin download...')
        # Get archive name to download
        url = None
        r = get('https://api.github.com/repos/Qowyn/ark-tools/releases/latest', headers=USERAGENT)
        if r.status_code == 200:
            items = r.json()
            for item in items['assets']:
                if item['content_type'] == 'application/x-zip-compressed':
                    url = item['browser_download_url']
        else:
            return None

        # Download ark-tools archive
        r = get(url, headers=USERAGENT)
        if r.status_code == 200:
            dir = os.path.join(self.__cwd, 'tools')
            os.makedirs(dir, exist_ok=True)
            archive = os.path.join(dir, 'ark-tools.zip')
            with open(archive, 'wb') as f:
                f.write(r.content)
            f.close()
            # Unpack and delete downloaded archive
            unpack_archive(archive, dir, format='zip')
            os.remove(archive)
            return os.path.join(dir, 'ark-tools.jar')

        return None

    def loadClasses(self, progress_callback, backup):
        """
        Load classes.json to model from unpacked backup

        :param progress_callback: Callback function for progress
        :param backup: Filename of backup
        """
        backupDir = os.path.join(self.__dataPath, backup)
        with open(os.path.join(backupDir, 'classes.json'), 'r') as data:
            classesModel.load(json.load(data))
            data.close()

    def loadTamed(self, progress_callback, backup, id):
        """
        Load classes.json to model from unpacked backup

        :param progress_callback: Callback function for progress
        :param backup: Filename of backup
        :param id: Creature identificator
        """
        backupDir = os.path.join(self.__dataPath, backup)
        with open(os.path.join(backupDir, '{}.json'.format(id)), 'r') as data:
            tamedModel.load(json.load(data))
            data.close()


class ARKZilla(QObject):
    """
    Main class. Glue for QML. Bindings, slots, thread launcher
    """

    backupStateProgress = pyqtSignal(int, arguments=['percent'])
    backupStateFinished = pyqtSignal()
    connectionError = pyqtSignal(str, arguments=['error'])
    connectionSuccess = pyqtSignal()
    downloadComplete = pyqtSignal()
    downloadError = pyqtSignal(str, arguments=['error'])
    hostChanged = pyqtSignal()
    javaNotFound = pyqtSignal()
    loadClassesError = pyqtSignal(str, arguments=['error'])
    loadClassesComplete = pyqtSignal()
    loadTamedError = pyqtSignal(str, arguments=['error'])
    loadTamedComplete = pyqtSignal()
    removeComplete = pyqtSignal()
    removeError = pyqtSignal(str, arguments=['error'])
    syncLocalError = pyqtSignal(str, arguments=['error'])
    syncRemoteError = pyqtSignal(str, arguments=['error'])
    themeChanged = pyqtSignal()
    unpackComplete = pyqtSignal()
    unpackError = pyqtSignal(str, arguments=['error'])

    def __init__(self):
        super(ARKZilla, self).__init__()

        self.__settings = QSettings(COMPANY, sys.argv[0])
        self.__sessionPass = ''
        self.__storePass = False

        self.__threadpool = QThreadPool()

        log('{} {} started with maximum {} threads'.format(
            COMPANY, __VERSION__, self.__threadpool.maxThreadCount()
        ))

        self.__client = Client()
        if self.host:
            self.__client.updatePath(self.host)

    @pyqtProperty(str, notify=hostChanged)
    def host(self):
        return self.__settings.value('host')

    @host.setter
    def host(self, value):
        self.__settings.setValue('host', value)
        self.__client.updatePath(value)
        self.hostChanged.emit()

    @pyqtProperty(str, constant=True)
    def login(self):
        return self.__settings.value('login', 'anonymous')

    @login.setter
    def login(self, value):
        self.__settings.setValue('login', value)

    @pyqtProperty(str, constant=True)
    def password(self):
        return self.__settings.contains('password') and self.__settings.value('password') or self.__sessionPass

    @password.setter
    def password(self, value):
        if self.__storePass:
            self.__settings.setValue('password', value)
        else:
            self.__sessionPass = value

    @pyqtProperty(bool, constant=True)
    def storePass(self):
        return self.__settings.contains('password')

    @storePass.setter
    def storePass(self, value):
        if (not value):
            self.__settings.remove('password')
        self.__storePass = value

    @pyqtProperty(str, constant=True)
    def remotePath(self):
        return self.__settings.value('remotePath', '/')

    @remotePath.setter
    def remotePath(self, value):
        self.__settings.setValue('remotePath', value)

    @pyqtProperty(str, constant=True)
    def toolsPath(self):
        return self.__settings.value('toolsPath', '')

    @toolsPath.setter
    def toolsPath(self, value):
        self.__settings.setValue('toolsPath', value)

    @pyqtProperty(bool, notify=themeChanged)
    def darkTheme(self):
        return self.__settings.value('darkTheme', False, type=bool)

    @darkTheme.setter
    def darkTheme(self, value):
        self.__settings.setValue('darkTheme', value)
        self.themeChanged.emit()

    @pyqtSlot(str, str, str)
    def testConnection(self, host, login, password):
        """
        Thread for test connection

        :param host: Remote host name
        :param login: Remote user name
        :param password: Remote password
        """
        worker = Worker(self.__client.testConnection,
                        host=host,
                        login=login,
                        password=password
                        )
        worker.signals.result.connect(self.connectionSuccess)
        worker.signals.error.connect(self.connectionError)
        self.__threadpool.start(worker)

    @pyqtSlot()
    def syncRemoteBackups(self):
        """
        Thread for getting remote backups list
        Send result to syncLocalBackups slot for merging with local backups
        """
        worker = Worker(self.__client.listRemote,
                        host=self.host,
                        login=self.login,
                        password=self.password,
                        path=self.remotePath)
        worker.signals.error.connect(self.syncRemoteError)
        worker.signals.result.connect(self.syncLocalBackups)
        self.__threadpool.start(worker)

    @pyqtSlot()
    @pyqtSlot(object)
    def syncLocalBackups(self, remote=list()):
        """
        Thread for merge remote backups with local in one model.

        :param remote: List of remote backups. Come from syncRemoteBackups
        """
        worker = Worker(self.__client.listLocal,
                        remote=remote)
        worker.signals.error.connect(self.syncLocalError)
        worker.signals.finished.connect(self.backupStateFinished)
        self.__threadpool.start(worker)

    @pyqtSlot(str)
    def download(self, backup):
        """
        Thread for downloading remote backup

        :param backup: Filename of backup to download
        """
        worker = Worker(self.__client.download,
                        host=self.host,
                        login=self.login,
                        password=self.password,
                        path=self.remotePath,
                        backup=backup)
        worker.signals.error.connect(self.downloadError)
        worker.signals.finished.connect(self.backupStateFinished)
        worker.signals.progress.connect(self.backupStateProgress)
        worker.signals.result.connect(self.downloadComplete)
        self.__threadpool.start(worker)

    @pyqtSlot(str)
    def remove(self, backup):
        """
        Thread for removing local backup and unpacked data

        :param backup: Filename of backup to remove
        """
        worker = Worker(self.__client.remove, backup=backup)
        worker.signals.error.connect(self.removeError)
        worker.signals.finished.connect(self.backupStateFinished)
        worker.signals.progress.connect(self.backupStateProgress)
        worker.signals.result.connect(self.removeComplete)
        self.__threadpool.start(worker)

    @pyqtSlot(str)
    def unpack(self, backup):
        """
        Thread for unpacking local backup

        :param backup: Filename of backup to unpack
        """
        # Check java exists
        if not which('java'):
            self.javaNotFound.emit()
            self.backupStateFinished.emit()
            return
        worker = Worker(self.__client.unpack, backup=backup, tools=self.toolsPath)
        worker.signals.error.connect(self.unpackError)
        worker.signals.finished.connect(self.backupStateFinished)
        worker.signals.result.connect(self.unpackComplete)
        self.__threadpool.start(worker)

    @pyqtSlot(str)
    def loadClasses(self, backup):
        """
        Thread for loading creature classes from unpacked backup

        :param backup: Filename of backup
        """
        worker = Worker(self.__client.loadClasses, backup=backup)
        worker.signals.result.connect(self.loadClassesComplete)
        worker.signals.error.connect(self.loadClassesError)
        self.__threadpool.start(worker)

    @pyqtSlot(str, str)
    def loadTamed(self, backup, id):
        """
        Thread for loading tamed creatures from unpacked backup

        :param backup: Filename of backup
        :param id: Creature identificator
        """
        worker = Worker(self.__client.loadTamed, backup=backup, id=id)
        worker.signals.result.connect(self.loadTamedComplete)
        worker.signals.error.connect(self.loadTamedError)
        self.__threadpool.start(worker)


class BackupModel(QAbstractListModel):
    """
    Model for BackupUI
    """

    localRole = Qt.UserRole + 1
    nameRole = Qt.UserRole + 2
    dateRole = Qt.UserRole + 3
    backupRole = Qt.UserRole + 4

    def __init__(self, model=[], parent=None):
        super(BackupModel, self).__init__(parent)
        self.__model = model

    def rowCount(self, parent=QModelIndex()):
        return len(self.__model)

    def data(self, index, role):
        if role in self.roleNames():
            item = self.__model[index.row()]
            key = self.roleNames()[role].decode()
            return item.get(key)

    def setData(self, index, value, role):
        if role in self.roleNames():
            key = self.roleNames()[role].decode()
            self.__model[index.row()][key] = value
            self.dataChanged.emit(index, index)
            return True
        return False

    def roleNames(self):
        return {BackupModel.localRole: b'local',
                BackupModel.nameRole: b'name',
                BackupModel.dateRole: b'date',
                BackupModel.backupRole: b'backup'}

    def load(self, data):
        """
        Load model from provided data
        """
        self.beginResetModel()
        self.__model = data
        self.endResetModel()


class ClassesModel(QAbstractListModel):
    """
    Model for TamedUI: classesView
    """
    clsRole = Qt.UserRole + 1
    nameRole = Qt.UserRole + 2

    def __init__(self, model=[], parent=None):
        super(ClassesModel, self).__init__(parent)
        self.__model = model

    def rowCount(self, parent=QModelIndex()):
        return len(self.__model)

    def data(self, index, role):
        if role in self.roleNames():
            item = self.__model[index.row()]
            key = self.roleNames()[role].decode()
            return item.get(key)

    def roleNames(self):
        return {ClassesModel.clsRole: b'cls',
                ClassesModel.nameRole: b'name'}

    def load(self, data):
        """
        Load model from provided data
        """
        self.beginResetModel()
        self.__model = data
        self.endResetModel()


class TamedModel(QAbstractListModel):
    """
    Model for TamedUI: tamedView
    """
    nameRole = Qt.UserRole + 1
    femaleRole = Qt.UserRole + 2
    tribeRole = Qt.UserRole + 3

    def __init__(self, model=[], parent=None):
        super(TamedModel, self).__init__(parent)
        self.__model = model

    def rowCount(self, parent=QModelIndex()):
        return len(self.__model)

    def data(self, index, role):
        if role in self.roleNames():
            item = self.__model[index.row()]
            key = self.roleNames()[role].decode()
            return item.get(key)

    def roleNames(self):
        return {TamedModel.nameRole: b'name',
                TamedModel.femaleRole: b'female',
                TamedModel.tribeRole: b'tribe',
                }

    def load(self, data):
        """
        Load model from provided data
        """
        self.beginResetModel()
        self.__model = data
        self.endResetModel()


if __name__ == '__main__':
    # Set Material Design style
    os.environ['QT_QUICK_CONTROLS_STYLE'] = 'Material'

    # Setup logger
    logging.basicConfig(filename='{}.log'.format(sys.argv[0]),
                        level=logging.DEBUG,
                        format='%(asctime)s - %(levelname)s - %(message)s')

    app = QGuiApplication(sys.argv)
    app.setOrganizationName(COMPANY)
    app.setApplicationName(sys.argv[0])
    engine = QQmlApplicationEngine()

    arkzilla = ARKZilla()
    backupModel = BackupModel()
    classesModel = ClassesModel()
    tamedModel = TamedModel()

    backupProxyModel = QSortFilterProxyModel()
    backupProxyModel.setSourceModel(backupModel)
    backupProxyModel.setSortRole(BackupModel.dateRole)
    backupProxyModel.setDynamicSortFilter(True)
    backupProxyModel.sort(0, Qt.DescendingOrder)

    classesProxyModel = QSortFilterProxyModel()
    classesProxyModel.setSourceModel(classesModel)
    classesProxyModel.setSortRole(ClassesModel.nameRole)
    classesProxyModel.setSortCaseSensitivity(Qt.CaseInsensitive)
    classesProxyModel.setDynamicSortFilter(True)
    classesProxyModel.sort(0, Qt.AscendingOrder)

    engine.rootContext().setContextProperty('arkzilla', arkzilla)
    engine.rootContext().setContextProperty('backupModel', backupProxyModel)
    engine.rootContext().setContextProperty('classesModel', classesProxyModel)
    engine.rootContext().setContextProperty('tamedModel', tamedModel)

    engine.load('main.qml')
    engine.quit.connect(app.quit)

    sys.exit(app.exec_())
